@page "/dice"

<h1><img class="img rolling-dice" src="./images/DiceRolling.png"/>Dice Roller<img class="img rolling-dice" src="./images/DiceRolling.png"/></h1>

<p>Select the <em>die, quantity, and any modifiers</em> then hit <strong>ROLL!</strong></p> 

<div class="" data-toggle="buttons">
    @foreach (var item in diceNames) //This loop helps create the dice
    {
        string imgName = item + ".png";
        string resource = "./images/" + imgName;
        <label class="btn btn-outline-primary btn-rounded waves-effect">
            @if (item == "d20") //makes the d20 checked... allows for default selection and rolling right away without having to select anything
            {
                <input type="radio" name="dice" id="@item"
                    autocomplete="off" checked
                    @onclick="@(() => UpdateValues(item))"> 
                <img src=@resource/>
            }
            else
            {
                <input type="radio" name="dice" id="@item"
                    autocomplete="off" 
                    @onclick="@(() => UpdateValues(item))"> 
                <img src=@resource/>
            }
        </label>
    }      
</div>

<br />
<div class="spinners" style="margin-top: 5px">
    <label for: quantity>Dice Quantity: </label>
    <input type="number" name="quantity" min="1" max="10" @bind-value =@Quantity>
    <label for: modifier01>Modifier 1: </label>
    <input type="number" name="modifier1" min="-10" max="10" @bind-value =@Modifier01>
    <label for: modifier02>Modifier 2: </label>
    <input type="number" name="modifier2" min="-10" max="10" @bind-value =@Modifier02>

    <div style="display: inline-flex">
        <span>Total min 1?</span>
        <label class="switch" for: toggle style="margin-bottom:0; top: -5px">
            <input type="checkbox" name="toggle" @onchange="@(()=>ToggleTotal())">
            <span class="slider round"></span>
        </label>
    </div>
</div>

<div>
    <button class="btn btn-outline-info" 
            style="margin-top: 5px; display:inline-block"
            @onclick="@(()=> ShowRoll())">
        <img class="img roll" src="./images/roll_dice.png"/>ROLL!
    </button>
    <p style="display:inline-flex"><strong>@RollResults</strong></p>
</div>


@code {
    private List<string> diceNames { get; set; } = new List<string>() {"d20", "d12", "d10", "d8", "d6", "d4"}; //If you want to add new dice, put name here and place new image with similar name in images folder

    private int DieMax { get; set; } = 20; //default values...so pre-checked radio button "d20" can be rolled without needing to select it
    private int Quantity { get; set; } = 1;
    private string RollResults { get; set; } = "<--- click to see results!";
    private string DiceName { get; set; }
    private int RollTotal { get; set; } = 0;
    private int Modifier01 { get; set; } = 0;
    private int Modifier02 { get; set; } = 0;
    private bool TotalMin { get; set; } = false;

    //dice roll logic below

    //This method will update dice info/data and set the results and quantity to defaults
    private void UpdateValues(string dName)
    {
        DiceName = dName;
        DieMax = int.Parse(dName.Substring(1));
        Quantity = 1;
        RollResults = "<--- click to see results!";
        RollTotal = 0;

        Console.WriteLine($"Name:{DiceName} \nMax: {DieMax}");
    }

    //shows the final roll results
    private void ShowRoll()
    {
        List<int> rolls = new List<int>();

        if (Quantity > 10)
        {
            Quantity = 10;
        }
        if (Quantity < 1)
        {
            Quantity = 1;
        }

        for (int i = 0; i < Quantity; i++)
        {
            rolls.Add(CalcRoll(DieMax));
        }

        foreach (var num in rolls)
        {
            RollTotal += num;
        }

        RollTotal += (Modifier01 + Modifier02);

        if (RollTotal < 1 && TotalMin == true)
        {
            RollTotal = 1;
        }

        RollResults = $" Results: {Quantity} {DiceName}: {ShowList(rolls)}{(Modifier01 != 0 ?" + "+ Modifier01:"")}{(Modifier02 != 0 ?" + "+ Modifier02:"")} || Total:{RollTotal}";
        RollTotal = 0;
    }

    //This is used to toggle the RollTotal value
    private void ToggleTotal()
    {
        if (TotalMin == false)
        { TotalMin = true; }
        else
        { TotalMin = false; }
    }

    //Calculates the roll of each die selected
    private int CalcRoll(int max)
    {
        Random random = new Random();
        int roll = random.Next(1, max + 1);

        return roll;
    }

    //Shows the list of each roll
    private string ShowList(List<int> rollList)
    {
        string result = "[ ";
        foreach (var item in rollList)
        {
            result += $"{item}, ";
        }

        result = result.TrimEnd(' '); //<--|
        result = result.TrimEnd(','); //<--|___these two make it so the last value doesnt have a comma or space after
        Console.WriteLine(result);

        return result += " ]";
    }
}


