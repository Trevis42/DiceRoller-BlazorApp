#pragma checksum "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\Pages\DiceRoller.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d0965064132c926d3deec756c4659cf9d4dda73f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor_app_01.Pages
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using blazor_app_01;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using blazor_app_01.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/dice")]
    public partial class DiceRoller : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 61 "C:\Users\TTaylor\TP Training Code and Stuff\Python and Other stuff\blazor-app-01\Pages\DiceRoller.razor"
       
    private List<string> diceNames { get; set; } = new List<string>() {"d20", "d12", "d10", "d8", "d6", "d4"};

    private int DieMax { get; set; } = 20;
    private int Quantity { get; set; } = 1;
    private string RollResults { get; set; } = "<--- click to see results!";
    private string DiceName { get; set; }
    private int RollTotal { get; set; } = 0;
    private int Modifier01 { get; set; } = 0;
    private int Modifier02 { get; set; } = 0;
    private bool TotalMin { get; set; } = false;

    //dice roll logic below
    private void UpdateValues(string dName)
    {
        DiceName = dName;
        DieMax = int.Parse(dName.Substring(1));
        Quantity = 1;
        RollResults = "<--- click to see results!";
        RollTotal = 0;
        //Modifier01 = 0;
        //Modifier02 = 0;

        Console.WriteLine($"Name:{DiceName} \nMax: {DieMax}");
    }

    private void ShowRoll()
    {
        List<int> rolls = new List<int>();

        if (Quantity > 10)
        {
            Quantity = 10;
        }
        if (Quantity < 1)
        {
            Quantity = 1;
        }

        for (int i = 0; i < Quantity; i++)
        {
            rolls.Add(CalcRoll(DieMax));
        }

        foreach (var num in rolls)
        {
            RollTotal += num;
        }

        RollTotal += (Modifier01 + Modifier02);

        if (RollTotal < 1 && TotalMin == true)
        {
            RollTotal = 1;
        }

        RollResults = $" Results: {Quantity} {DiceName}: {ShowList(rolls)} + {Modifier01} + {Modifier02} || Total:{RollTotal}";
        RollTotal = 0;
    }

    private void ToggleTotal()
    {
        if (TotalMin == false)
        { TotalMin = true; }
        else
        { TotalMin = false; }
    }

    private int CalcRoll(int max)
    {
        Random random = new Random();
        int roll = random.Next(1, max + 1);

        return roll;
    }

    private string ShowList(List<int> rollList)
    {
        string result = "[ ";
        foreach (var item in rollList)
        {
            result += $"{item}, ";
        }

        result = result.TrimEnd(' ');
        result = result.TrimEnd(',');
        Console.WriteLine(result);

        return result += " ]";
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
